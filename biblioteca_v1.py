#!/usr/bin/env python3
"""
Sistema de Gest√£o de Biblioteca - Vers√£o 1 (com problemas intencionais)

Este c√≥digo cont√©m erros propositais para demonstrar a cadeia causal:
Erro ‚Üí Defeito ‚Üí Falha ‚Üí Incidente

Autor: Estudo de Caso - Conceitos Fundamentais de Teste
"""

from datetime import datetime, timedelta
from typing import Dict, List, Optional
from enum import Enum


class TipoUsuario(Enum):
    """Enumera os tipos de usu√°rios do sistema."""
    ESTUDANTE = "estudante"
    PROFESSOR = "professor"


class StatusUsuario(Enum):
    """Enumera os status poss√≠veis de um usu√°rio."""
    ATIVO = "ativo"
    BLOQUEADO = "bloqueado"


class Livro:
    """
    Representa um livro no sistema da biblioteca.
    
    ERRO INTENCIONAL 1: Falta de valida√ß√£o adequada do ISBN
    """
    
    def __init__(self, isbn: str, titulo: str, autor: str, disponivel: bool = True):
        # DEFEITO: ISBN n√£o √© validado adequately
        # Um ISBN deve ter 10 ou 13 d√≠gitos, mas n√£o estamos verificando
        self.isbn = isbn  # Aqui est√° o DEFEITO
        self.titulo = titulo
        self.autor = autor
        self.disponivel = disponivel
    
    def emprestar(self) -> bool:
        """
        Marca o livro como emprestado.
        
        Returns:
            bool: True se empr√©stimo foi realizado com sucesso
        """
        if self.disponivel:
            self.disponivel = False
            return True
        return False
    
    def devolver(self) -> None:
        """Marca o livro como dispon√≠vel novamente."""
        self.disponivel = True


class Usuario:
    """
    Representa um usu√°rio do sistema da biblioteca.
    
    ERRO INTENCIONAL 2: L√≥gica incorreta na valida√ß√£o de bloqueio
    """
    
    def __init__(self, user_id: str, nome: str, tipo: TipoUsuario, 
                 status: StatusUsuario = StatusUsuario.ATIVO):
        self.user_id = user_id
        self.nome = nome
        self.tipo = tipo
        self.status = status
        self.multa_total = 0.0
    
    def pode_emprestar(self) -> bool:
        """
        Verifica se o usu√°rio pode realizar empr√©stimos.
        
        DEFEITO: L√≥gica de bloqueio est√° invertida!
        O programador confundiu == com !=
        """
        # DEFEITO CR√çTICO: Esta condi√ß√£o est√° ERRADA!
        # Deveria ser: self.status == StatusUsuario.ATIVO
        return self.status == StatusUsuario.BLOQUEADO  # ‚ùå DEFEITO!
    
    def adicionar_multa(self, valor: float) -> None:
        """Adiciona multa ao usu√°rio."""
        self.multa_total += valor
        
        # DEFEITO: Limite de bloqueio por multa mal implementado
        if self.multa_total > 50.0:  # Bloqueia com multa alta
            self.status = StatusUsuario.BLOQUEADO


class Emprestimo:
    """
    Representa um empr√©stimo de livro.
    
    ERRO INTENCIONAL 3: C√°lculo incorreto de multa
    """
    
    def __init__(self, usuario: Usuario, livro: Livro):
        self.usuario = usuario
        self.livro = livro
        self.data_emprestimo = datetime.now()
        
        # DEFEITO: C√°lculo de prazo com l√≥gica errada para professores
        if usuario.tipo == TipoUsuario.ESTUDANTE:
            self.prazo_dias = 7
        else:  # Professor
            # DEFEITO: N√∫mero errado de dias para professor!
            # Requisito era 30 dias, mas programador colocou 3!
            self.prazo_dias = 3  # ‚ùå DEFEITO! Deveria ser 30
        
        self.data_vencimento = self.data_emprestimo + timedelta(days=self.prazo_dias)
        self.devolvido = False
        self.data_devolucao: Optional[datetime] = None
    
    def calcular_multa(self) -> float:
        """
        Calcula multa por atraso na devolu√ß√£o.
        
        DEFEITO: Taxa de multa incorreta para professores
        """
        if self.devolvido and self.data_devolucao:
            dias_atraso = (self.data_devolucao - self.data_vencimento).days
            
            if dias_atraso > 0:
                if self.usuario.tipo == TipoUsuario.ESTUDANTE:
                    return dias_atraso * 1.0  # Correto: R$ 1,00 por dia
                else:
                    # DEFEITO: Taxa errada para professor!
                    # Deveria ser 0.50, mas est√° 5.0!
                    return dias_atraso * 5.0  # ‚ùå DEFEITO! Deveria ser 0.50
        
        return 0.0
    
    def devolver_livro(self, data_devolucao: datetime = None) -> float:
        """
        Processa a devolu√ß√£o do livro.
        
        Returns:
            float: Valor da multa aplicada
        """
        if data_devolucao is None:
            data_devolucao = datetime.now()
        
        self.data_devolucao = data_devolucao
        self.devolvido = True
        self.livro.devolver()
        
        multa = self.calcular_multa()
        if multa > 0:
            self.usuario.adicionar_multa(multa)
        
        return multa


class SistemaBiblioteca:
    """
    Sistema principal de gest√£o da biblioteca.
    
    ERRO INTENCIONAL 4: Falta de tratamento de exce√ß√µes
    """
    
    def __init__(self):
        self.livros: Dict[str, Livro] = {}
        self.usuarios: Dict[str, Usuario] = {}
        self.emprestimos: List[Emprestimo] = []
    
    def cadastrar_livro(self, isbn: str, titulo: str, autor: str) -> bool:
        """
        Cadastra um novo livro no sistema.
        
        DEFEITO: N√£o valida ISBN duplicado adequadamente
        """
        # DEFEITO: N√£o verifica se ISBN j√° existe!
        # Permite cadastros duplicados
        livro = Livro(isbn, titulo, autor)
        self.livros[isbn] = livro  # Sobrescreve livros existentes!
        return True
    
    def cadastrar_usuario(self, user_id: str, nome: str, tipo: TipoUsuario) -> bool:
        """Cadastra um novo usu√°rio no sistema."""
        if user_id in self.usuarios:
            return False  # Usu√°rio j√° existe
        
        usuario = Usuario(user_id, nome, tipo)
        self.usuarios[user_id] = usuario
        return True
    
    def realizar_emprestimo(self, user_id: str, isbn: str) -> Optional[Emprestimo]:
        """
        Realiza um empr√©stimo de livro.
        
        DEFEITO: N√£o trata casos de usu√°rio/livro inexistente
        """
        # DEFEITO: N√£o verifica se usu√°rio existe!
        # Pode causar KeyError (exce√ß√£o n√£o tratada)
        usuario = self.usuarios[user_id]  # ‚ùå Poss√≠vel exce√ß√£o!
        
        # DEFEITO: N√£o verifica se livro existe!
        livro = self.livros[isbn]  # ‚ùå Poss√≠vel exce√ß√£o!
        
        # Verifica se usu√°rio pode emprestar
        if not usuario.pode_emprestar():
            return None  # Usu√°rio bloqueado (mas l√≥gica est√° invertida!)
        
        # Verifica se livro est√° dispon√≠vel
        if not livro.emprestar():
            return None  # Livro n√£o dispon√≠vel
        
        emprestimo = Emprestimo(usuario, livro)
        self.emprestimos.append(emprestimo)
        return emprestimo


# =============================================================================
# DEMONSTRA√á√ÉO PR√ÅTICA: Como os DEFEITOS geram FALHAS e INCIDENTES
# =============================================================================

def demonstracao_cadeia_causal():
    """
    Demonstra como erros no c√≥digo geram defeitos, 
    que causam falhas, que resultam em incidentes.
    """
    print("=== DEMONSTRA√á√ÉO: Cadeia Erro ‚Üí Defeito ‚Üí Falha ‚Üí Incidente ===\n")
    
    # Inicializa o sistema
    biblioteca = SistemaBiblioteca()
    
    # Cadastra livros e usu√°rios
    biblioteca.cadastrar_livro("123", "Python para Iniciantes", "Autor X")
    biblioteca.cadastrar_usuario("prof001", "Dr. Silva", TipoUsuario.PROFESSOR)
    biblioteca.cadastrar_usuario("est001", "Jo√£o Santos", TipoUsuario.ESTUDANTE)
    
    print("‚úÖ Sistema inicializado com livros e usu√°rios")
    
    # =================================================================
    # INCIDENTE 1: Usu√°rio bloqueado consegue fazer empr√©stimo
    # =================================================================
    print("\nüö® INCIDENTE 1: L√≥gica de bloqueio invertida")
    
    # For√ßa bloqueio do usu√°rio
    usuario_estudante = biblioteca.usuarios["est001"]
    usuario_estudante.status = StatusUsuario.BLOQUEADO
    print(f"üìã Status do estudante: {usuario_estudante.status.value}")
    
    # Tenta fazer empr√©stimo (deveria ser negado, mas ser√° aprovado!)
    emprestimo = biblioteca.realizar_emprestimo("est001", "123")
    
    if emprestimo:
        print("‚ùå FALHA: Usu√°rio BLOQUEADO conseguiu fazer empr√©stimo!")
        print("üí∏ INCIDENTE: Biblioteca perde controle sobre usu√°rios inadimplentes")
    else:
        print("‚úÖ Empr√©stimo negado corretamente")
    
    # =================================================================
    # INCIDENTE 2: Professor com prazo errado
    # =================================================================
    print("\nüö® INCIDENTE 2: Prazo incorreto para professor")
    
    # Cadastra novo livro para testar com professor
    biblioteca.cadastrar_livro("456", "Metodologia Cient√≠fica", "Autor Y")
    emprestimo_prof = biblioteca.realizar_emprestimo("prof001", "456")
    
    if emprestimo_prof:
        print(f"üìÖ Prazo para professor: {emprestimo_prof.prazo_dias} dias")
        print("‚ùå FALHA: Professor deveria ter 30 dias, mas tem apenas 3!")
        print("üò° INCIDENTE: Professores reclamam de prazo muito curto")
    
    # =================================================================
    # INCIDENTE 3: Multa exorbitante para professor
    # =================================================================
    print("\nüö® INCIDENTE 3: Multa incorreta para professor")
    
    # Simula devolu√ß√£o com atraso
    data_futura = datetime.now() + timedelta(days=5)  # 5 dias de atraso
    multa = emprestimo_prof.devolver_livro(data_futura)
    
    print(f"üí∞ Multa calculada: R$ {multa:.2f}")
    print("‚ùå FALHA: Professor deveria pagar R$ 2,50 (5 dias √ó R$ 0,50)")
    print("üí∏ INCIDENTE: Professor √© cobrado R$ 25,00 - valor abusivo!")
    
    # =================================================================
    # INCIDENTE 4: Sistema trava com dados inexistentes
    # =================================================================
    print("\nüö® INCIDENTE 4: Sistema trava com exce√ß√£o n√£o tratada")
    
    try:
        # Tenta empr√©stimo com usu√°rio inexistente
        biblioteca.realizar_emprestimo("user999", "123")
    except KeyError as e:
        print(f"üí• EXCE√á√ÉO: {type(e).__name__} - {e}")
        print("‚ùå FALHA: Sistema n√£o trata usu√°rio inexistente")
        print("üî• INCIDENTE: Sistema da biblioteca trava durante atendimento")


if __name__ == "__main__":
    demonstracao_cadeia_causal()